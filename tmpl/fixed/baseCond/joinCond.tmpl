{{.AUTO_GENERATED_ANNOTATION}}

package {{.packages.baseCond.RefName}}

import {{.packages.base.ImportStatement}}

type JoinCond struct {
	joinIndex uint8
	op        {{.packages.base.RefName}}.JoinOp
	cond      string
}

func (receiver JoinCond) GetOp() {{.packages.base.RefName}}.JoinOp {
	return receiver.op
}

func (receiver JoinCond) GetCond() string {
	return receiver.cond
}

func (receiver JoinCond) GetJoinIndex() uint8 {
	return receiver.joinIndex
}

func LeftJoin(joinIndex uint8, cond string) {{.packages.base.RefName}}.IJoinCond {
	return &JoinCond{
        joinIndex: joinIndex,
		op:        {{.packages.base.RefName}}.JoinOpLeft,
		cond:      cond,
	}
}

func RightJoin(joinIndex uint8, cond string) {{.packages.base.RefName}}.IJoinCond {
	return &JoinCond{
        joinIndex: joinIndex,
		op:        {{.packages.base.RefName}}.JoinOpRight,
		cond:      cond,
	}
}

func InnerJoin(joinIndex uint8, cond string) {{.packages.base.RefName}}.IJoinCond {
	return &JoinCond{
        joinIndex: joinIndex,
		op:        {{.packages.base.RefName}}.JoinOpInner,
		cond:      cond,
	}
}
