{{.AUTO_GENERATED_ANNOTATION}}

package {{.packages.baseCond.RefName}}

import (
    "xorm.io/builder"
	{{.packages.base.ImportStatement}}
)

type WhereCondGroup struct {
	op    {{.packages.base.RefName}}.Op
	group []{{.packages.base.RefName}}.IWhereCond
}

func (receiver WhereCondGroup) GetOp() {{.packages.base.RefName}}.Op {
	return receiver.op
}


func (receiver WhereCondGroup) GetWhereBuilder() builder.Cond {
	cond := builder.NewCond()
	for _, whereCond := range receiver.group {
		condItem := whereCond.GetWhereBuilder()
		if whereCond.GetOp() == {{.packages.base.RefName}}.Op_AND {
			cond = cond.And(condItem)
		} else {
			cond = cond.Or(condItem)
		}
	}
	return cond
}
