{{.AUTO_GENERATED_ANNOTATION}}

package {{.packages.whereCond.RefName}}

import (
	"xorm.io/builder"
	"fmt"
    {{.packages.base.ImportStatement}}
    {{.packages.baseCond.ImportStatement}}

	{{ range .tableImports }}
	    {{- . -}}
	{{ end }}
)

func {{.constructorName.whereCond}}(op {{.packages.base.RefName}}.Op, _tableInfo *{{.packages.base.RefName}}.TableInfo) *{{.structName.whereCond}} {
	return &{{.structName.whereCond}}{
		_op:        op,
		_tableInfo: _tableInfo,
	}
}

func {{.constructorName.whereCondInner}}(op {{.packages.base.RefName}}.Op, _tableInfo *{{.packages.base.RefName}}.TableInfo) *{{.structName.whereCondInner}} {
	return &{{.structName.whereCondInner}}{
		_op:        op,
		_tableInfo: _tableInfo,
	}
}

// region wrapper

type {{.structName.whereCond}} struct {
	_op        {{.packages.base.RefName}}.Op
	_tableInfo *{{.packages.base.RefName}}.TableInfo
	_conds     []{{.packages.base.RefName}}.IWhereCond
}

func (receiver *{{.structName.whereCond}}) And() *{{.structName.whereCondInner}} {
	cond := {{.constructorName.whereCondInner}}({{.packages.base.RefName}}.Op_AND, receiver._tableInfo)
	receiver._conds = append(receiver._conds, cond)
	return cond
}

func (receiver *{{.structName.whereCond}}) Or() *{{.structName.whereCondInner}} {
	cond := {{.constructorName.whereCondInner}}({{.packages.base.RefName}}.Op_OR, receiver._tableInfo)
	receiver._conds = append(receiver._conds, cond)
	return cond
}

// region 原生sql

func (receiver *{{.structName.whereCond}}) AndRaw(sql string, args ...any) {
	receiver._conds = append(receiver._conds, {{.packages.baseCond.RefName}}.NewRawWhereCondItem[any]({{.packages.base.RefName}}.Op_AND, sql, args...))
}

func (receiver *{{.structName.whereCond}}) OrRaw(sql string, args ...any) {
	receiver._conds = append(receiver._conds, {{.packages.baseCond.RefName}}.NewRawWhereCondItem[any]({{.packages.base.RefName}}.Op_OR, sql, args...))
}

// endregion

// region 嵌套

func (receiver *{{.structName.whereCond}}) AndNest(fun func(cond *{{.structName.whereCond}})) {
	cond := {{.constructorName.whereCond}}({{.packages.base.RefName}}.Op_AND, receiver._tableInfo)
	fun(cond)
	receiver._conds = append(receiver._conds, cond)
}
func (receiver *{{.structName.whereCond}}) OrNest(fun func(cond *{{.structName.whereCond}})) {
	cond := {{.constructorName.whereCond}}({{.packages.base.RefName}}.Op_OR, receiver._tableInfo)
	fun(cond)
	receiver._conds = append(receiver._conds, cond)
}

// endregion

func (receiver *{{.structName.whereCond}}) GetOp() {{.packages.base.RefName}}.Op {
	return receiver._op
}

func (receiver *{{.structName.whereCond}}) GetWhereBuilder() builder.Cond {
	cond := builder.NewCond()
	for _, whereCond := range receiver._conds {
		if whereCond.GetOp() == base.Op_OR {
			cond = cond.Or(whereCond.GetWhereBuilder())
		} else {
			cond = cond.And(whereCond.GetWhereBuilder())
		}
	}
	return cond
}

// endregion

type {{.structName.whereCondInner}} struct {
	_op             {{.packages.base.RefName}}.Op
	_tableInfo      *{{.packages.base.RefName}}.TableInfo
	_raw            *{{.packages.baseCond.RefName}}.RawWhereCondItem

	{{ range .column }}
	    {{- .FIELD_NAME}} *{{.packages.baseCond.RefName}}.WhereCondItem[{{.FIELD_TYPE}}] {{- if .COLUMN_COMMENT }} {{.COLUMN_COMMENT}} {{ end }}
	{{ end }}
}

// region 数据库字段

{{ range .column -}}
    {{- template "columnTmpl" . }}
{{- end }}

// endregion

func (receiver *{{.structName.whereCondInner}}) tableName() string {
	tableName := ""
	if receiver._tableInfo != nil && receiver._tableInfo.Alias != "" {
		tableName = receiver._tableInfo.Alias
		tableName = fmt.Sprintf("`%s`.", tableName)
	}
	return tableName
}

func (receiver *{{.structName.whereCondInner}}) GetOp() {{.packages.base.RefName}}.Op {
	return receiver._op
}


func (receiver *{{.structName.whereCondInner}}) GetWhereBuilder() builder.Cond {
	cond := builder.NewCond()

	{{ range .column }}
        {{- template "appendWhereCondToListTmpl" . -}}
    {{ end }}

	if receiver._raw != nil {
		if receiver._raw.GetOp() == base.Op_OR {
			cond = cond.Or(receiver._raw.GetWhereBuilder())
		} else {
			cond = cond.And(receiver._raw.GetWhereBuilder())
		}
	}

	return cond
}