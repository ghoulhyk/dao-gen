{{.AUTO_GENERATED_ANNOTATION}}

package {{.packages.updater.RefName}}

import (
	"fmt"
    {{.packages.base.ImportStatement}}
    {{.packages.baseCond.ImportStatement}}
    {{.packages.whereCond.ImportStatement}}
    {{.packages.errors.ImportStatement}}

	{{ if (empty .DATABASE_DEF_FIELD_NAME | not) }}
	    {{.packages.util.ImportStatement}}
        {{.packages.databaseDef.ImportStatement}}
	{{ end }}

	{{ range .tableImports }}
	    {{- . -}}
	{{ end }}
)

// region updaterParams

type {{.structName.updaterParams}} struct {
	whereCondList []{{.packages.base.RefName}}.IWhereCond
	limit         int

	// region UpdateValItem

	{{ range .column }}
	    {{- .FIELD_NAME}} *{{.packages.baseCond.RefName}}.UpdateValItem {{- if .COLUMN_COMMENT }} {{.COLUMN_COMMENT}} {{ end }}
	{{ end }}

	// endregion
}

func (receiver *{{.structName.updaterParams}}) TableInfo() {{.packages.base.RefName}}.TableInfo {
	return {{.packages.base.RefName}}.TableInfo{
		DatabaseInfo: {{ if empty .DATABASE_DEF_FIELD_NAME }}nil{{else}}{{.packages.util.RefName}}.ToPtr({{.packages.databaseDef.RefName}}.{{.DATABASE_DEF_FIELD_NAME}}()){{ end }},
		TableName:    "{{.TABLE_NAME}}",
	}
}

func (receiver *{{.structName.updaterParams}}) GetWhereCondList() *[]{{.packages.base.RefName}}.IWhereCond {
	return &receiver.whereCondList
}

func (receiver *{{.structName.updaterParams}}) GetUpdateValItemList() *[]{{.packages.base.RefName}}.IUpdateValItem {
	var result []{{.packages.base.RefName}}.IUpdateValItem

    {{ range .column }}
        {{- template "appendValToListTmpl" . -}}
    {{ end }}

	return &result
}

func (receiver *{{.structName.updaterParams}}) GetLimit() int {
	return receiver.limit
}

// endregion

type {{.structName.updaterWrapper}} struct {
	clientHolder {{.packages.base.RefName}}.IClientHolder
	params       *{{.structName.updaterParams}}
}

func (receiver *{{.structName.updaterWrapper}}) Init(client {{.packages.base.RefName}}.IClient) *{{.structName.updaterWrapper}} {
	clientHolder := &{{.packages.base.RefName}}.ClientHolder{}
	clientHolder.Init(client)
	receiver.clientHolder = clientHolder
	receiver.params = &{{.structName.updaterParams}}{}
	receiver.params.limit = -1
	return receiver
}

func (receiver *{{.structName.updaterWrapper}}) Where(fun func(cond *{{.packages.whereCond.RefName}}.{{.structName.whereCond}})) *{{.structName.updaterWrapper}} {
	return receiver.AndWhere(fun)
}

func (receiver *{{.structName.updaterWrapper}}) AndWhere(fun func(cond *{{.packages.whereCond.RefName}}.{{.structName.whereCond}})) *{{.structName.updaterWrapper}} {
	cond := {{.packages.whereCond.RefName}}.{{.constructorName.whereCond}}({{.packages.base.RefName}}.Op_AND, {{.packages.util.RefName}}.ToPtr(receiver.params.TableInfo()))
	fun(cond)
	receiver.params.whereCondList = append(receiver.params.whereCondList, cond)
	return receiver
}

func (receiver *{{.structName.updaterWrapper}}) OrWhere(fun func(cond *{{.packages.whereCond.RefName}}.{{.structName.whereCond}})) *{{.structName.updaterWrapper}} {
	cond := {{.packages.whereCond.RefName}}.{{.constructorName.whereCond}}({{.packages.base.RefName}}.Op_OR, {{.packages.util.RefName}}.ToPtr(receiver.params.TableInfo()))
	fun(cond)
	receiver.params.whereCondList = append(receiver.params.whereCondList, cond)
	return receiver
}

func (receiver *{{.structName.updaterWrapper}}) Limit(limit uint) *{{.structName.updaterWrapper}} {
    receiver.params.limit = int(limit)
	return receiver
}

func (receiver *{{.structName.updaterWrapper}}) Update() (updateRows uint64, err error) {
	return receiver.clientHolder.GetClient().Update(receiver.params)
}

// 发生错误直接panic
// 更新数量为0 不会 panic
func (receiver *{{.structName.updaterWrapper}}) MustUpdate() (updateRows uint64) {
	updateRows, err := receiver.Update()
	if err != nil {
		if receiver.clientHolder.GetClient().IsInTransaction() {
			receiver.clientHolder.GetClient().Rollback()
		}
		panic({{.packages.errors.RefName}}.UpdateErr("{{.TABLE_NAME}}", err))
	}

	return
}

// Deprecated: 使用 MustUpdate
func (receiver *{{.structName.updaterWrapper}}) UpdateOrPanic() (updateRows uint64) {
	return receiver.MustUpdate()
}

// region val setter
{{ range .column }}
    {{- template "valSetterTmpl" . -}}
{{ end }}
// endregion