{{.AUTO_GENERATED_ANNOTATION}}

package {{.packages.selector.RefName}}

import (
	{{.packages.errors.ImportStatement}}
	{{.packages.base.ImportStatement}}
	{{.packages.baseCond.ImportStatement}}
	{{.packages.baseModel.ImportStatement}}
	{{.packages.fields.ImportStatement}}
	{{.packages.model.ImportStatement}}
	{{.packages.whereCond.ImportStatement}}
	{{.packages.orderCond.ImportStatement}}
	{{ if (empty .DATABASE_DEF_FIELD_NAME | not) }}
	    {{.packages.util.ImportStatement}}
        {{.packages.databaseDef.ImportStatement}}
	{{ end }}
)

// region selectorParams

type {{.structName.selectorParams}} struct {
	whereCondList []{{.packages.base.RefName}}.IWhereCond
	page          {{.packages.base.RefName}}.IPage
	orderList     []{{.packages.base.RefName}}.IOrder
	fieldList     []{{.packages.base.RefName}}.IFieldList
}

func (receiver *{{.structName.selectorParams}}) TableInfo() {{.packages.base.RefName}}.TableInfo {
	return {{.packages.base.RefName}}.TableInfo{
		DatabaseInfo: {{ if empty .DATABASE_DEF_FIELD_NAME }}nil{{else}}{{.packages.util.RefName}}.ToPtr({{.packages.databaseDef.RefName}}.{{.DATABASE_DEF_FIELD_NAME}}()){{ end }},
		TableName:    "{{.TABLE_NAME}}",
	}
}

func (receiver *{{.structName.selectorParams}}) ProvideResultData() interface{} {
	return &{{.packages.model.RefName}}.{{.structName.model}}{}
}

func (receiver *{{.structName.selectorParams}}) GetWhereCondList() *[]{{.packages.base.RefName}}.IWhereCond {
	return &receiver.whereCondList
}

func (receiver *{{.structName.selectorParams}}) GetPageCond() {{.packages.base.RefName}}.IPage {
	return receiver.page
}

func (receiver *{{.structName.selectorParams}}) GetOrderCondList() *[]{{.packages.base.RefName}}.IOrder {
	return &receiver.orderList
}

func (receiver *{{.structName.selectorParams}}) GetFieldList() *[]{{.packages.base.RefName}}.IFieldList {
	return &receiver.fieldList
}

// endregion

type {{.structName.selectorWrapper}} struct {
	_count
	_exist
	clientHolder  {{.packages.base.RefName}}.IClientHolder
	params        *{{.structName.selectorParams}}
}

func (receiver *{{.structName.selectorWrapper}}) Init(client {{.packages.base.RefName}}.IClient) *{{.structName.selectorWrapper}} {
	clientHolder := &{{.packages.base.RefName}}.ClientHolder{}
	clientHolder.Init(client)
	receiver.clientHolder = clientHolder
	receiver.params = &{{.structName.selectorParams}}{}
	receiver._count = _count{
		clientHolder: receiver.clientHolder,
		params:       receiver.params,
	}
	receiver._exist = _exist{
		_count: receiver._count,
	}
	return receiver
}

func (receiver *{{.structName.selectorWrapper}}) Where(fun func(cond *{{.packages.whereCond.RefName}}.{{.structName.whereCond}})) *{{.structName.selectorWrapper}} {
	return receiver.AndWhere(fun)
}

func (receiver *{{.structName.selectorWrapper}}) AndWhere(fun func(cond *{{.packages.whereCond.RefName}}.{{.structName.whereCond}})) *{{.structName.selectorWrapper}} {
	cond := {{.packages.whereCond.RefName}}.{{.constructorName.whereCond}}({{.packages.base.RefName}}.Op_AND, {{.packages.util.RefName}}.ToPtr(receiver.params.TableInfo()))
	fun(cond)
	receiver.params.whereCondList = append(receiver.params.whereCondList, cond)
	return receiver
}

func (receiver *{{.structName.selectorWrapper}}) OrWhere(fun func(cond *{{.packages.whereCond.RefName}}.{{.structName.whereCond}})) *{{.structName.selectorWrapper}} {
	cond := {{.packages.whereCond.RefName}}.{{.constructorName.whereCond}}({{.packages.base.RefName}}.Op_OR, {{.packages.util.RefName}}.ToPtr(receiver.params.TableInfo()))
	fun(cond)
	receiver.params.whereCondList = append(receiver.params.whereCondList, cond)
	return receiver
}

func (receiver *{{.structName.selectorWrapper}}) ClearWhereCond() *{{.structName.selectorWrapper}} {
	receiver.params.whereCondList = []{{.packages.base.RefName}}.IWhereCond{}
	return receiver
}

func (receiver *{{.structName.selectorWrapper}}) WithField(fun func(fields *{{.packages.fields.RefName}}.{{.structName.fields}})) *{{.structName.selectorWrapper}} {
	cond := {{.packages.fields.RefName}}.{{.constructorName.fields}}({{.packages.util.RefName}}.ToPtr(receiver.params.TableInfo()))
	fun(cond)
	receiver.params.fieldList = append(receiver.params.fieldList, cond)
	return receiver
}

func (receiver *{{.structName.selectorWrapper}}) WithoutField(fun func(fields *{{.packages.fields.RefName}}.{{.structName.fields}})) *{{.structName.selectorWrapper}} {
	cond := {{.packages.fields.RefName}}.{{.constructorName.fields}}({{.packages.util.RefName}}.ToPtr(receiver.params.TableInfo()))
	fun(cond)
	receiver.params.fieldList = append(receiver.params.fieldList, cond)
	return receiver
}

func (receiver *{{.structName.selectorWrapper}}) Page(page {{.packages.base.RefName}}.IPage) *{{.structName.selectorWrapper}} {
	receiver.params.page = page
	return receiver
}

func (receiver *{{.structName.selectorWrapper}}) OrderBy(fun func(orders *{{.packages.orderCond.RefName}}.{{.structName.orderCond}})) *{{.structName.selectorWrapper}} {
	cond := &{{.packages.orderCond.RefName}}.{{.structName.orderCond}}{}
	fun(cond)
	receiver.params.orderList = append(receiver.params.orderList, cond.GetOrderCondList()...)
	return receiver
}

func (receiver *{{.structName.selectorWrapper}}) List() ([]{{.packages.model.RefName}}.{{.structName.model}}, error) {
	list, _, err := receiver.clientHolder.GetClient().Select(receiver.params)
	if err != nil {
		return nil, err
	}
	selectResult := list.([]{{.packages.model.RefName}}.{{.structName.model}})
	if selectResult == nil {
		selectResult = []{{.packages.model.RefName}}.{{.structName.model}}{}
	}
	return selectResult, nil
}

func (receiver *{{.structName.selectorWrapper}}) Single() (exist bool, model *{{.packages.model.RefName}}.{{.structName.model}}, err error) {
	exist, single, err := receiver.clientHolder.GetClient().Single(receiver.params)
	if err != nil {
		return
	}
	if !exist {
		return
	}
	model = single.(*{{.packages.model.RefName}}.{{.structName.model}})
	return
}

func (receiver *{{.structName.selectorWrapper}}) Pagination() (*{{.packages.baseModel.RefName}}.Pagination[{{.packages.model.RefName}}.{{.structName.model}}], error) {
	list, total, err := receiver.clientHolder.GetClient().Select(receiver.params)
	if err != nil {
		return nil, err
	}
	selectResult := list.([]{{.packages.model.RefName}}.{{.structName.model}})
	if selectResult == nil {
		selectResult = []{{.packages.model.RefName}}.{{.structName.model}}{}
	}
	return {{.packages.baseModel.RefName}}.NewPagination(selectResult, total, receiver.params.page), nil
}

// 发生错误直接panic
// 长度为0 不会 panic
func (receiver *{{.structName.selectorWrapper}}) MustList() []{{.packages.model.RefName}}.{{.structName.model}} {
	result, err := receiver.List()
	if err != nil {
		if receiver.clientHolder.GetClient().IsInTransaction() {
			receiver.clientHolder.GetClient().Rollback()
		}
		panic({{.packages.errors.RefName}}.SelectErr("{{.TABLE_NAME}}", err))
	}
	return result
}

// 发生错误直接panic
// 未找到 不会 panic
func (receiver *{{.structName.selectorWrapper}}) MustSingle() *{{.packages.model.RefName}}.{{.structName.model}} {
	_, result, err := receiver.Single()
	if err != nil {
		if receiver.clientHolder.GetClient().IsInTransaction() {
			receiver.clientHolder.GetClient().Rollback()
		}
		panic({{.packages.errors.RefName}}.SelectErr("{{.TABLE_NAME}}", err))
	}
	return result
}

// 发生错误直接panic
// 长度为0 不会 panic
func (receiver *{{.structName.selectorWrapper}}) MustPagination() *{{.packages.baseModel.RefName}}.Pagination[{{.packages.model.RefName}}.{{.structName.model}}] {
	result, err := receiver.Pagination()
	if err != nil {
		if receiver.clientHolder.GetClient().IsInTransaction() {
			receiver.clientHolder.GetClient().Rollback()
		}
		panic({{.packages.errors.RefName}}.SelectErr("{{.TABLE_NAME}}", err))
	}
	return result
}

// Deprecated: 使用 MustList
func (receiver *{{.structName.selectorWrapper}}) ListOrPanic() []{{.packages.model.RefName}}.{{.structName.model}} {
	return receiver.MustList()
}

// Deprecated: 使用 MustSingle
func (receiver *{{.structName.selectorWrapper}}) SingleOrPanic() *{{.packages.model.RefName}}.{{.structName.model}} {
	return receiver.MustSingle()
}

// Deprecated: 使用 MustPagination
func (receiver *{{.structName.selectorWrapper}}) PaginationOrPanic() *{{.packages.baseModel.RefName}}.Pagination[{{.packages.model.RefName}}.{{.structName.model}}] {
	return receiver.MustPagination()
}

func (receiver *{{.structName.selectorWrapper}}) Chunk(cb func(list []{{.packages.model.RefName}}.{{.structName.model}}) (stop bool), pageSize int) {
	page := 0
	for true {
		pageCdt := {{.packages.baseCond.RefName}}.PageCdtLimited(page, pageSize)
		list, _ := receiver.Page(pageCdt).List()
		if len(list) == 0 {
			break
		}
		stop := cb(list)
		if stop {
			break
		}
		page++
	}
}

{{ if .HAS_AUTOINCR_PK -}}
    {{ template "byIdTmpl" . }}
{{- end }}