{{ define "bulkInserterStructTmpl" }}
// region bulkInserter

// region bulkInserterParams

type {{.structName.bulkInserterParams}} struct {
	insertData []{{.structName.inserterDataModel}}
}

func (receiver *{{.structName.bulkInserterParams}}) TableInfo() {{.packages.base.RefName}}.TableInfo {
	return {{.packages.base.RefName}}.TableInfo{
		DatabaseInfo: {{ if empty .DATABASE_DEF_FIELD_NAME }}nil{{else}}{{.packages.util.RefName}}.ToPtr({{.packages.databaseDef.RefName}}.{{.DATABASE_DEF_FIELD_NAME}}()){{ end }},
		TableName:    "{{.TABLE_NAME}}",
	}
}

func (receiver *{{.structName.bulkInserterParams}}) InsertData() []{{.packages.base.RefName}}.IInserterDataModel {
	result := []{{.packages.base.RefName}}.IInserterDataModel{}
	for _, data := range receiver.insertData {
		result = append(result, data)
	}
	return result
}

func (receiver *{{.structName.bulkInserterParams}}) HasAutoincrPk() bool {
	return {{.HAS_AUTOINCR_PK}}
}

// endregion


type {{.structName.bulkInserterWrapper}} struct {
	clientHolder {{.packages.base.RefName}}.IClientHolder
	params       *{{.structName.bulkInserterParams}}
}

// 内部方法，不应调用
func (receiver *{{.structName.bulkInserterWrapper}}) Init(client {{.packages.base.RefName}}.IClient) *{{.structName.bulkInserterWrapper}} {
	clientHolder := &{{.packages.base.RefName}}.ClientHolder{}
	clientHolder.Init(client)
	receiver.params = &{{.structName.bulkInserterParams}}{}
	receiver.clientHolder = clientHolder
	return receiver
}

func (receiver *{{.structName.bulkInserterWrapper}}) AddData(datas ...{{.packages.model.RefName}}.{{.structName.model}}) *{{.structName.bulkInserterWrapper}} {
	for _, data := range datas {
		inserterModel := {{.structName.inserterDataModel}}{}
		inserterModel._insertColumns = map[string]byte{}

		{{ range .column -}}
		    {{ template "bulkInserterSetNotNilTmpl" . }}
		{{- end }}

		receiver.params.insertData = append(receiver.params.insertData, inserterModel)
	}
	return receiver
}

func (receiver *{{.structName.bulkInserterWrapper}}) AddDataFunc(fun func(data *{{.packages.model.RefName}}.{{.structName.model}})) *{{.structName.bulkInserterWrapper}} {
	data := {{.packages.model.RefName}}.{{.structName.model}}{}
	fun(&data)
	receiver.AddData(data)
	return receiver
}

func (receiver *{{.structName.bulkInserterWrapper}}) Insert() ([]*{{.packages.model.RefName}}.{{.structName.model}}, error) {
	_, {{ if .HAS_AUTOINCR_PK }}pkList{{ else }}_{{ end }}, err := receiver.clientHolder.GetClient().BulkInsert(receiver.params)
	if err != nil {
		return nil, err
	}

	result := make([]*{{.packages.model.RefName}}.{{.structName.model}}, len(receiver.params.insertData))
	for i, data := range receiver.params.insertData {
		result[i] = data.RealInsertData().(*{{.packages.model.RefName}}.{{.structName.model}})
		{{- if .HAS_AUTOINCR_PK }}
		result[i].Set{{.PK_FIELD_NAME_TITLED}}({{.PK_FIELD_TYPE}}(pkList[i].(int64)))
		{{- end }}
	}

	return result, nil
}

// 发生错误直接panic
func (receiver *{{.structName.bulkInserterWrapper}}) MustInsert() []*{{.packages.model.RefName}}.{{.structName.model}} {
	insertResults, err := receiver.Insert()
	if err != nil {
		if receiver.clientHolder.GetClient().IsInTransaction() {
			receiver.clientHolder.GetClient().Rollback()
		}
		panic({{.packages.errors.RefName}}.InsertErr("{{.TABLE_NAME}}", err))
	}

	return insertResults
}

// Deprecated: 使用 MustInsert
func (receiver *{{.structName.bulkInserterWrapper}}) InsertOrPanic() []*{{.packages.model.RefName}}.{{.structName.model}} {
	return receiver.MustInsert()
}

// endregion
{{ end }}
