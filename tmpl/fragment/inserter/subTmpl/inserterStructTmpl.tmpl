{{ define "inserterStructTmpl" }}
// region inserter

// region inserterParams

type {{.structName.inserterParams}} struct {
	insertData {{.structName.inserterDataModel}}
}

func (receiver *{{.structName.inserterParams}}) TableInfo() {{.packages.base.RefName}}.TableInfo {
	return {{.packages.base.RefName}}.TableInfo{
		DatabaseInfo: {{ if empty .DATABASE_DEF_FIELD_NAME }}nil{{else}}{{.packages.util.RefName}}.ToPtr({{.packages.databaseDef.RefName}}.{{.DATABASE_DEF_FIELD_NAME}}()){{ end }},
		TableName:    "{{.TABLE_NAME}}",
	}
}

func (receiver *{{.structName.inserterParams}}) InsertData() {{.packages.base.RefName}}.IInserterDataModel {
	return &receiver.insertData
}

func (receiver *{{.structName.inserterParams}}) HasAutoincrPk() bool {
	return {{.HAS_AUTOINCR_PK}}
}

// endregion

type {{.structName.inserterWrapper}} struct {
	clientHolder  {{.packages.base.RefName}}.IClientHolder
	params        *{{.structName.inserterParams}}
}

// 内部方法，不应调用
func (receiver *{{.structName.inserterWrapper}}) Init(client {{.packages.base.RefName}}.IClient) *{{.structName.inserterWrapper}} {
	clientHolder := &{{.packages.base.RefName}}.ClientHolder{}
	clientHolder.Init(client)
	receiver.clientHolder = clientHolder
	receiver.params = &{{.structName.inserterParams}}{}
	receiver.params.insertData._insertColumns = map[string]byte{}
	return receiver
}

// region column setter

{{ range .column -}}
    {{ template "inserterSetterFuncTmpl" . }}
{{- end }}

// endregion

func (receiver *{{.structName.inserterWrapper}}) FillNotNilData(data {{.packages.model.RefName}}.{{.structName.model}}) *{{.structName.inserterWrapper}} {
	{{ range .column -}}
	if data.{{.FIELD_NAME_TITLED}} != nil {
        receiver.Set{{.FIELD_NAME_TITLED}}(*data.{{.FIELD_NAME_TITLED}})
    }
    {{ end }}
	return receiver
}

func (receiver *{{.structName.inserterWrapper}}) FillNotNilDataFunc(fun func(data *{{.packages.model.RefName}}.{{.structName.model}})) *{{.structName.inserterWrapper}} {
	data := {{.packages.model.RefName}}.{{.structName.model}}{}
	fun(&data)
	receiver.FillNotNilData(data)
	return receiver
}

func (receiver *{{.structName.inserterWrapper}}) Insert() (*{{.packages.model.RefName}}.{{.structName.model}}, error) {
	_, {{ if .HAS_AUTOINCR_PK }}pk{{ else }}_{{ end }}, err := receiver.clientHolder.GetClient().Insert(receiver.params)
	if err != nil {
		return nil, err
	}
	modelObj := receiver.params.insertData.RealInsertData().(*{{.packages.model.RefName}}.{{.structName.model}})
	{{ if .HAS_AUTOINCR_PK -}}
	modelObj.Set{{.PK_FIELD_NAME_TITLED}}({{.PK_FIELD_TYPE}}(pk.(int64)))
	{{- end }}
	return modelObj, nil
}

// 发生错误直接panic
func (receiver *{{.structName.inserterWrapper}}) MustInsert() *{{.packages.model.RefName}}.{{.structName.model}} {
	insertResult, err := receiver.Insert()
	if err != nil {
		if receiver.clientHolder.GetClient().IsInTransaction() {
			receiver.clientHolder.GetClient().Rollback()
		}
		panic({{.packages.errors.RefName}}.InsertErr("{{.TABLE_NAME}}", err))
	}

	return insertResult
}

// Deprecated: 使用 MustInsert
func (receiver *{{.structName.inserterWrapper}}) InsertOrPanic() *{{.packages.model.RefName}}.{{.structName.model}} {
	return receiver.MustInsert()
}

// endregion
{{ end }}