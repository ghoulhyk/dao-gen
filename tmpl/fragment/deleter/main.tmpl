{{.AUTO_GENERATED_ANNOTATION}}

package {{.packages.deleter.RefName}}

import (
	{{.packages.base.ImportStatement}}
	{{.packages.whereCond.ImportStatement}}
	{{.packages.errors.ImportStatement}}
	{{ if (empty .DATABASE_DEF_FIELD_NAME | not) }}
	    {{.packages.util.ImportStatement}}
        {{.packages.databaseDef.ImportStatement}}
	{{ end }}
)

// region deleterParams

type {{.structName.deleterParams}} struct {
	whereCondList []base.IWhereCond
}

func (receiver *{{.structName.deleterParams}}) TableInfo() {{.packages.base.RefName}}.TableInfo {
	return {{.packages.base.RefName}}.TableInfo{
		DatabaseInfo: {{ if empty .DATABASE_DEF_FIELD_NAME }}nil{{else}}{{.packages.util.RefName}}.ToPtr({{.packages.databaseDef.RefName}}.{{.DATABASE_DEF_FIELD_NAME}}()){{ end }},
		TableName:    "{{.TABLE_NAME}}",
	}
}

func (receiver *{{.structName.deleterParams}}) GetWhereCondList() *[]{{.packages.base.RefName}}.IWhereCond {
	return &receiver.whereCondList
}

// endregion

type {{.structName.deleterWrapper}} struct {
	clientHolder {{.packages.base.RefName}}.IClientHolder
	params       *{{.structName.deleterParams}}
}

func (receiver *{{.structName.deleterWrapper}}) Init(client {{.packages.base.RefName}}.IClient) *{{.structName.deleterWrapper}} {
	clientHolder := &{{.packages.base.RefName}}.ClientHolder{}
	clientHolder.Init(client)
	receiver.clientHolder = clientHolder
	receiver.params = &{{.structName.deleterParams}}{}
	return receiver
}

func (receiver *{{.structName.deleterWrapper}}) Where(fun func(cond *{{.packages.whereCond.RefName}}.{{.structName.whereCond}})) *{{.structName.deleterWrapper}} {
	return receiver.AndWhere(fun)
}

func (receiver *{{.structName.deleterWrapper}}) AndWhere(fun func(cond *{{.packages.whereCond.RefName}}.{{.structName.whereCond}})) *{{.structName.deleterWrapper}} {
	cond := {{.packages.whereCond.RefName}}.{{.constructorName.whereCond}}({{.packages.base.RefName}}.Op_AND, {{.packages.util.RefName}}.ToPtr(receiver.params.TableInfo()))
	fun(cond)
	receiver.params.whereCondList = append(receiver.params.whereCondList, cond)
	return receiver
}

func (receiver *{{.structName.deleterWrapper}}) OrWhere(fun func(cond *{{.packages.whereCond.RefName}}.{{.structName.whereCond}})) *{{.structName.deleterWrapper}} {
	cond := {{.packages.whereCond.RefName}}.{{.constructorName.whereCond}}({{.packages.base.RefName}}.Op_OR, {{.packages.util.RefName}}.ToPtr(receiver.params.TableInfo()))
	fun(cond)
	receiver.params.whereCondList = append(receiver.params.whereCondList, cond)
	return receiver
}

func (receiver *{{.structName.deleterWrapper}}) Delete() (deleteRows uint64, err error) {
	return receiver.clientHolder.GetClient().Delete(receiver.params)
}

// 发生错误直接panic
// 删除数量为0 不会 panic
func (receiver *{{.structName.deleterWrapper}}) MustDelete() (deleteRows uint64) {
	deleteRows, err := receiver.Delete()
	if err != nil {
		if receiver.clientHolder.GetClient().IsInTransaction() {
			receiver.clientHolder.GetClient().Rollback()
		}
		panic({{.packages.errors.RefName}}.DeleteErr("{{.TABLE_NAME}}", err))
	}
	return
}

// Deprecated: 使用 MustDelete
func (receiver *{{.structName.deleterWrapper}}) DeleteOrPanic() (deleteRows uint64) {
	return receiver.MustDelete()
}

{{ if .HAS_AUTOINCR_PK -}}
    {{ template "byIdTmpl" . }}
{{- end }}
