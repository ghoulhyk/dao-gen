{{ define "byIdTmpl" }}
func (receiver *{{.structName.deleterWrapper}}) DeleteById(id {{.PK_FIELD_TYPE}}) (deleted bool, err error) {
	localVar := {{.structName.deleterWrapper}}{}

	localVar.Init(receiver.clientHolder.GetClient())

	rows, err := localVar.AndWhere(func(cond *{{.packages.whereCond.RefName}}.{{.structName.whereCond}}) {
			cond.And().{{.PK_FIELD_NAME_TITLED}}().Equ(id)
		}).Delete()
	if err != nil {
		return
	}
	return rows == 1, nil
}

// 发生错误直接panic
// 删除数量为0 不会 panic
func (receiver *{{.structName.deleterWrapper}}) MustDeleteById(id {{.PK_FIELD_TYPE}}) (deleted bool) {
	result, err := receiver.DeleteById(id)
	if err != nil {
		panic({{.packages.errors.RefName}}.DeleteErr("{{.TABLE_NAME}}", err))
	}
	return result
}

// Deprecated: 使用 MustDeleteById
func (receiver *{{.structName.deleterWrapper}}) DeleteByIdOrPanic(id {{.PK_FIELD_TYPE}}) (deleted bool) {
	return receiver.MustDeleteById(id)
}

func (receiver *{{.structName.deleterWrapper}}) DeleteByIds(ids ...{{.PK_FIELD_TYPE}}) (deleteRows uint64, err error) {
	localVar := {{.structName.deleterWrapper}}{}

	localVar.Init(receiver.clientHolder.GetClient())

	rows, err := localVar.AndWhere(func(cond *{{.packages.whereCond.RefName}}.{{.structName.whereCond}}) {
			cond.And().{{.PK_FIELD_NAME_TITLED}}().In(ids...)
		}).Delete()
	if err != nil {
		return
	}
	return rows, nil
}

// 发生错误直接panic
// 删除数量为0 不会 panic
func (receiver *{{.structName.deleterWrapper}}) MustDeleteByIds(ids ...{{.PK_FIELD_TYPE}}) (deleteRows uint64) {
	result, err := receiver.DeleteByIds(ids...)
	if err != nil {
		panic({{.packages.errors.RefName}}.DeleteErr("{{.TABLE_NAME}}", err))
	}
	return result
}

// Deprecated: 使用 MustDeleteByIds
func (receiver *{{.structName.deleterWrapper}}) DeleteByIdsOrPanic(ids ...{{.PK_FIELD_TYPE}}) (deleteRows uint64) {
	return receiver.MustDeleteByIds(ids...)
}
{{ end }}