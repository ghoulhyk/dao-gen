package generator

import (
	"github.com/ghoulhyk/dao-gen/bean"
	"github.com/ghoulhyk/dao-gen/conf"
	"github.com/ghoulhyk/dao-gen/conf/confBean"
	"github.com/ghoulhyk/dao-gen/utils"
	"path/filepath"
)

func commonDataItem(basicPath string) map[string]any {
	basicPackageName := filepath.Base(basicPath)
	return map[string]any{
		"packages": map[string]confBean.PackageInfo{
			"util":        conf.GetUtilPackageInfo(basicPath),
			"errors":      conf.GetErrorsPackageInfo(basicPath),
			"base":        conf.GetBasePackageInfo(basicPath),
			"baseCond":    conf.GetBaseCondPackageInfo(basicPath),
			"baseModel":   conf.GetBaseModelPackageInfo(basicPath),
			"fields":      conf.GetFieldsPackageInfo(basicPath),
			"databaseDef": conf.GetDatabaseDefPackageInfo(basicPath),
			"model":       conf.GetModelPackageInfo(basicPath),
			"whereCond":   conf.GetWhereCondPackageInfo(basicPath),
			"orderCond":   conf.GetOrderCondPackageInfo(basicPath),

			"inserter":     conf.GetInserterPackageInfo(basicPath),
			"selector":     conf.GetSelectorPackageInfo(basicPath),
			"joinSelector": conf.GetJoinSelectorPackageInfo(basicPath),
			"updater":      conf.GetUpdaterPackageInfo(basicPath),
			"deleter":      conf.GetDeleterPackageInfo(basicPath),

			"outsideConf": conf.GetOutsideConfPackageInfo(basicPath),
		},

		"BASIC_PACKAGE_NAME":        basicPackageName,
		"AUTO_GENERATED_ANNOTATION": utils.AutoGeneratedFileAnnotation(),

		"ORM_SESSION_GETTER_FUNC":   conf.GetIns().OrmInfo.SessionGetterFunc,
		"ORM_SESSION_GETTER_IMPORT": conf.GetIns().OrmInfo.SessionGetterImport,
	}
}

func tableDataItem(table bean.TableInfo) map[string]any {
	pkFieldType := ""
	pkFieldNameTitled := ""
	pk, hasPk := table.ColumnList().AutoIncrPkFieldInfo()
	if hasPk {
		pkFieldType = pk.FieldType(false, true)
		pkFieldNameTitled = pk.TitledFieldName()
	}
	return map[string]any{
		"structName": map[string]string{
			"whereCond":      table.WhereCondStructName(),
			"whereCondInner": table.WhereCondInnerStructName(),

			"inserterWrapper":     table.InserterWrapperStructName(),
			"bulkInserterWrapper": table.BulkInserterWrapperStructName(),
			"selectorWrapper":     table.SelectorWrapperStructName(),
			"updaterWrapper":      table.UpdaterWrapperStructName(),
			"deleterWrapper":      table.DeleterWrapperStructName(),
			"inserterParams":      table.InserterParamsStructName(),
			"bulkInserterParams":  table.BulkInserterParamsStructName(),
			"selectorParams":      table.SelectorParamsStructName(),
			"updaterParams":       table.UpdaterParamsStructName(),
			"deleterParams":       table.DeleterParamsStructName(),

			"inserterDataModel": table.InserterDataModelName(),

			"orderCond": table.OrderCondStructName(),
			"fields":    table.FieldStructName(),
			"model":     table.ModelBeanName(),
		},

		"constructorName": map[string]string{
			"fields":         table.FieldStructConstructorName(),
			"whereCond":      table.WhereCondStructConstructorName(),
			"whereCondInner": table.WhereCondInnerStructConstructorName(),
		},

		"TABLE_NAME":              table.TableName(),
		"DATABASE_DEF_FIELD_NAME": table.DatabaseDefFieldName(),

		"HAS_AUTOINCR_PK":      hasPk,
		"PK_FIELD_TYPE":        pkFieldType,
		"PK_FIELD_NAME_TITLED": pkFieldNameTitled,
	}
}

func columnDataItem(fieldInfo bean.TableColumn) map[string]any {
	return map[string]any{
		"FIELD_NAME":                    fieldInfo.UntitledFieldName(),
		"FIELD_TYPE":                    fieldInfo.FieldType(false, true),
		"FIELD_NAME_TITLED":             fieldInfo.TitledFieldName(),
		"FIELD_TAG":                     fieldInfo.ModelFieldTag(),
		"COLUMN_NAME":                   fieldInfo.ColumnName(),
		"COLUMN_COMMENT":                fieldInfo.EndAnnotationStr(),
		"FIELD_TYPE_WITH_OUT_MODEL_PKG": fieldInfo.FieldType(false, false),
	}
}
