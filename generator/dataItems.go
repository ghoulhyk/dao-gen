package generator

import (
	"github.com/ghoulhyk/dao-gen/bean"
	"github.com/ghoulhyk/dao-gen/conf"
	"github.com/ghoulhyk/dao-gen/utils"
	"path/filepath"
)

func commonDataItem(basicPath string) map[string]any {
	basicPackageName := filepath.Base(basicPath)
	return map[string]any{
		"BASIC_PACKAGE_NAME":        basicPackageName,
		"AUTO_GENERATED_ANNOTATION": utils.AutoGeneratedFileAnnotation(),
		"ORM_TYPE":                  conf.GetIns().OrmInfo.Type,
		"ORM_SESSION_GETTER_FUNC":   conf.GetIns().OrmInfo.SessionGetterFunc,
		"ORM_SESSION_GETTER_IMPORT": conf.GetIns().OrmInfo.SessionGetterImport,

		"OUTSIDE_PACKAGE_NAME":   conf.GetOutsideConfPackageInfo(basicPath).PackageNameForRef(),
		"OUTSIDE_PACKAGE_IMPORT": conf.GetOutsideConfPackageInfo(basicPath).ImportStatement(),

		"UTIL_PACKAGE_NAME":         conf.GetUtilPackageInfo(basicPath).PackageNameForRef(),
		"ERRORS_PACKAGE_NAME":       conf.GetErrorsPackageInfo(basicPath).PackageNameForRef(),
		"BASE_PACKAGE_NAME":         conf.GetBasePackageInfo(basicPath).PackageNameForRef(),
		"BASE_COND_PACKAGE_NAME":    conf.GetBaseCondPackageInfo(basicPath).PackageNameForRef(),
		"BASE_MODEL_PACKAGE_NAME":   conf.GetBaseModelPackageInfo(basicPath).PackageNameForRef(),
		"FIELDS_PACKAGE_NAME":       conf.GetFieldsPackageInfo(basicPath).PackageNameForRef(),
		"DATABASE_DEF_PACKAGE_NAME": conf.GetDatabaseDefPackageInfo(basicPath).PackageNameForRef(),
		"MODEL_PACKAGE_NAME":        conf.GetModelPackageInfo(basicPath).PackageNameForRef(),
		"WHERE_COND_PACKAGE_NAME":   conf.GetWhereCondPackageInfo(basicPath).PackageNameForRef(),
		"ORDER_COND_PACKAGE_NAME":   conf.GetOrderCondPackageInfo(basicPath).PackageNameForRef(),

		"UTIL_PACKAGE_IMPORT":         conf.GetUtilPackageInfo(basicPath).ImportStatement(),
		"ERRORS_PACKAGE_IMPORT":       conf.GetErrorsPackageInfo(basicPath).ImportStatement(),
		"BASE_PACKAGE_IMPORT":         conf.GetBasePackageInfo(basicPath).ImportStatement(),
		"BASE_COND_PACKAGE_IMPORT":    conf.GetBaseCondPackageInfo(basicPath).ImportStatement(),
		"BASE_MODEL_PACKAGE_IMPORT":   conf.GetBaseModelPackageInfo(basicPath).ImportStatement(),
		"FIELDS_PACKAGE_IMPORT":       conf.GetFieldsPackageInfo(basicPath).ImportStatement(),
		"DATABASE_DEF_PACKAGE_IMPORT": conf.GetDatabaseDefPackageInfo(basicPath).ImportStatement(),
		"MODEL_PACKAGE_IMPORT":        conf.GetModelPackageInfo(basicPath).ImportStatement(),
		"WHERE_COND_PACKAGE_IMPORT":   conf.GetWhereCondPackageInfo(basicPath).ImportStatement(),
		"ORDER_COND_PACKAGE_IMPORT":   conf.GetOrderCondPackageInfo(basicPath).ImportStatement(),

		"INSERTER_PACKAGE_NAME":      conf.GetInserterPackageInfo(basicPath).PackageNameForRef(),
		"SELECTOR_PACKAGE_NAME":      conf.GetSelectorPackageInfo(basicPath).PackageNameForRef(),
		"JOIN_SELECTOR_PACKAGE_NAME": conf.GetJoinSelectorPackageInfo(basicPath).PackageNameForRef(),
		"UPDATER_PACKAGE_NAME":       conf.GetUpdaterPackageInfo(basicPath).PackageNameForRef(),
		"DELETER_PACKAGE_NAME":       conf.GetDeleterPackageInfo(basicPath).PackageNameForRef(),

		"INSERTER_PACKAGE_IMPORT":      conf.GetInserterPackageInfo(basicPath).ImportStatement(),
		"SELECTOR_PACKAGE_IMPORT":      conf.GetSelectorPackageInfo(basicPath).ImportStatement(),
		"JOIN_SELECTOR_PACKAGE_IMPORT": conf.GetJoinSelectorPackageInfo(basicPath).ImportStatement(),
		"UPDATER_PACKAGE_IMPORT":       conf.GetUpdaterPackageInfo(basicPath).ImportStatement(),
		"DELETER_PACKAGE_IMPORT":       conf.GetDeleterPackageInfo(basicPath).ImportStatement(),
	}
}

func tableDataItem(table bean.TableInfo) map[string]any {
	pkFieldType := ""
	pkFieldNameTitled := ""
	pk, hasPk := table.ColumnList().AutoIncrPkFieldInfo()
	if hasPk {
		pkFieldType = pk.FieldType(false, true)
		pkFieldNameTitled = pk.TitledFieldName()
	}
	return map[string]any{
		"STRUCT_NAME":             table.StructName(),
		"TABLE_NAME":              table.TableName(),
		"DATABASE_DEF_FIELD_NAME": table.DatabaseDefFieldName(),
		"MODEL_BEAN_NAME":         table.ModelBeanName(),

		"WHERE_COND_STRUCT_NAME":                   table.WhereCondStructName(),
		"WHERE_COND_INNER_STRUCT_NAME":             table.WhereCondInnerStructName(),
		"WHERE_COND_STRUCT_CONSTRUCTOR_NAME":       table.WhereCondStructConstructorName(),
		"WHERE_COND_INNER_STRUCT_CONSTRUCTOR_NAME": table.WhereCondInnerStructConstructorName(),

		"INSERTER_WRAPPER_STRUCT_NAME":      table.InserterWrapperStructName(),
		"BULK_INSERTER_WRAPPER_STRUCT_NAME": table.BulkInserterWrapperStructName(),
		"SELECTOR_WRAPPER_STRUCT_NAME":      table.SelectorWrapperStructName(),
		"UPDATER_WRAPPER_STRUCT_NAME":       table.UpdaterWrapperStructName(),
		"DELETER_WRAPPER_STRUCT_NAME":       table.DeleterWrapperStructName(),

		"INSERTER_PARAMS_STRUCT_NAME":      table.InserterParamsStructName(),
		"BULK_INSERTER_PARAMS_STRUCT_NAME": table.BulkInserterParamsStructName(),
		"SELECTOR_PARAMS_STRUCT_NAME":      table.SelectorParamsStructName(),
		"UPDATER_PARAMS_STRUCT_NAME":       table.UpdaterParamsStructName(),
		"DELETER_PARAMS_STRUCT_NAME":       table.DeleterParamsStructName(),

		"INSERTER_DATA_MODEL_STRUCT_NAME": table.InserterDataModelName(),

		"ORDER_COND_STRUCT_NAME": table.OrderCondStructName(),

		"HAS_AUTOINCR_PK":      hasPk,
		"PK_FIELD_TYPE":        pkFieldType,
		"PK_FIELD_NAME_TITLED": pkFieldNameTitled,
	}
}

func columnDataItem(fieldInfo bean.TableColumn) map[string]any {
	return map[string]any{
		"FIELD_NAME":                    fieldInfo.UntitledFieldName(),
		"FIELD_TYPE":                    fieldInfo.FieldType(false, true),
		"FIELD_NAME_TITLED":             fieldInfo.TitledFieldName(),
		"FIELD_TAG":                     fieldInfo.ModelFieldTag(),
		"COLUMN_NAME":                   fieldInfo.ColumnName(),
		"COLUMN_COMMENT":                fieldInfo.EndAnnotationStr(),
		"FIELD_TYPE_WITH_OUT_MODEL_PKG": fieldInfo.FieldType(false, false),
	}
}
